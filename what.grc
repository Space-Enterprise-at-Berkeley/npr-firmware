options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: no_gui
    hier_block_src_path: '.:'
    id: what
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: run
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [112, 80.0]
    rotation: 0
    state: enabled

blocks:
- name: fname
  id: variable
  parameters:
    comment: ''
    value: '"firstrealpls"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [872, 8.0]
    rotation: 0
    state: true
- name: fsk_deviation_hz
  id: variable
  parameters:
    comment: ''
    value: '20000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [592, 64.0]
    rotation: 0
    state: true
- name: num_pts
  id: variable
  parameters:
    comment: ''
    value: int(samp_rate * 0.2)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [760, 32.0]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '300000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [248, 24.0]
    rotation: 0
    state: true
- name: update_rate
  id: variable
  parameters:
    comment: ''
    value: '0.00001'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [464, 24.0]
    rotation: 0
    state: true
- name: analog_quadrature_demod_cf_0
  id: analog_quadrature_demod_cf
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    gain: 3*(samp_rate/(2*math.pi*fsk_deviation_hz))
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [616, 292.0]
    rotation: 0
    state: true
- name: blocks_complex_to_mag_squared_0
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [608, 404.0]
    rotation: 0
    state: true
- name: blocks_moving_average_xx_0
  id: blocks_moving_average_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    length: '10000'
    max_iter: '10000'
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [800, 504.0]
    rotation: 0
    state: true
- name: blocks_multiply_const_xx_0
  id: blocks_multiply_const_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: '100'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [640, 508.0]
    rotation: 0
    state: true
- name: blocks_null_sink_0
  id: blocks_null_sink
  parameters:
    affinity: ''
    alias: ''
    bus_structure_sink: '[[0,],]'
    comment: ''
    num_inputs: '1'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1320, 364.0]
    rotation: 0
    state: true
- name: digital_binary_slicer_fb_0
  id: digital_binary_slicer_fb
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 308.0]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\nimport numpy as np\nfrom gnuradio import gr\nimport time, socket\n\
      from collections import deque\n\nip = \"127.0.0.1\"\ndestip = \"10.0.0.42\"\n\
      port = 42069\n\ntesting_check = False\n\ngood_packets, bad_packets = 0, 0\n\
      prevTime = 0\n\ndef checkErrorRate(self):\n    if (time.time() - self.prevTime)\
      \ > 2:\n        tP = (self.good_packets + self.bad_packets)\n        if (tP\
      \ > 0):\n            erate = self.good_packets / tP\n            print(f\"%\
      \ good in last 2 seconds: {erate*100}, total good packets: {self.good_packets}\"\
      )\n        else:\n            print(f\"% good in last 2 seconds: --\")\n \n\
      \        self.prevTime = time.time()\n        self.good_packets, self.bad_packets\
      \ = 0, 0\n\n    \n\ndef clean(i, cumctr, preval):\n    \n    #decimates by a\
      \ factor of 25-ish to eliminated repeated sampling\n    #should've just sampled\
      \ slower \xAF\\_(\u30C4)_/\xAF\n    \n    #f = open(\"/Users/sekharm/wtf.txt\"\
      , \"a\")\n    #print(i, end = \"\", file=f)\n    #f.close()\n    if len(i) ==\
      \ 0: return\n    out = []\n    ctr = 1\n    cumctr = cumctr\n    preval = preval\n\
      \    while (ctr < len(i)):\n        val = i[ctr]\n        if val == '': continue\n\
      \        if (val != preval):\n            #print(cumctr/25)\n            out\
      \ += [preval]*int(round(cumctr/25))\n            cumctr = 0\n        cumctr\
      \ += 1\n        ctr += 1\n        preval = val\n    return (\"\".join(out),\
      \ cumctr, preval)\n\n\ndef computeChecksum(buff):\n    sum1, sum2 = 0, 0\n\n\
      \    id = buff[0]\n    length = buff[1]\n    timestamp = buff[2:6]\n    checksum\
      \ = buff[6:8]\n    data = buff[8:]\n\n    sum1 = sum1 + id\n    sum2 = sum2\
      \ + sum1\n    sum1, sum2 = (sum1%256), (sum2%256)\n\n\n    sum1 = sum1 + length\n\
      \    sum2 = sum2 + sum1\n    sum1, sum2 = (sum1%256), (sum2%256)\n\n    for\
      \ i in range(4):\n        sum1 = sum1 + timestamp[i]\n        sum2 = sum2 +\
      \ sum1\n        sum1, sum2 = (sum1%256), (sum2%256)\n    \n    for i in range(length):\n\
      \        sum1 = sum1 + data[i]\n        sum2 = sum2 + sum1\n        sum1, sum2\
      \ = (sum1%256), (sum2%256)\n\n    return ((sum2 << 8)|sum1)\n\n    \n\n\n\n\
      def split(self, buff):\n\n    #*flight* packets are combined into one radio\
      \ packet (max 128 bytes)\n    #so this function splits them into flight packets\n\
      \    ctr = 0\n    try:\n        while True:\n            if (len(buff) < 9):\n\
      \                return\n            id = buff[0]\n            length = buff[1]\n\
      \            timestamp = (buff[2] << 24) + (buff[3] << 16) + (buff[4] << 8)\
      \ + (buff[5])\n            checksum = (buff[7] << 8) + buff[6]\n\n         \
      \   #print(f\"id: {id}, length: {length}, timestamp: {timestamp}, checksum:\
      \ {checksum}, expected checkum: {computeChecksum(buff)}\")\n            #print(f\"\
      buffer length {len(buff)}, expected length {length + 8}\")\n            if (computeChecksum(buff)\
      \ == checksum):\n                ctr += 1\n                #print(f\"sending\
      \ packet #{ctr} with id: {id}, length: {length}\")\n                self.good_packets\
      \ += 1\n                sendover(self, buff)\n            else:\n          \
      \      # print(\"CHECKSUM ERROR\")\n                self.bad_packets += 1\n\
      \            buff = buff[8+length:]\n    except Exception as e:\n        return\n\
      \n\ndef testing_add(self, i):\n    #print(i)\n    self.lastPacketTime = time.time()\n\
      \    check = True\n    packet_start = i[0]\n    if (68 < packet_start < 71):\n\
      \        f = i[1]\n        for j in range(1, i+[0]*100):\n            if (i[j]\
      \ != f+j-1):\n                check = False\n    else:\n        check = False\n\
      \    if check : self.testctr+=1\n            \n\ndef sendRssiPacket(self, rssi):\n\
      \    buff = []\n    buff.append(56)\n    buff.append(2)\n    buff += [0]*6\n\
      \    buff.append(int(rssi) % 256)\n    buff.append(min(255, abs(int(rssi) >>\
      \ 8)))\n    i = computeChecksum(buff)\n    buff[6] = min(255, abs(int(i % 256)))\n\
      \    buff[7] = min(255, abs(int(i >> 8)))\n#    print(buff)\n    sendover(self,\
      \ buff)\n    \n    \ndef sendover(self, buff):\n    #sends a flight packet to\
      \ the GS\n    \n    if testing_check:\n        testing_add(self, buff)\n\n\n\
      \    \n    f = list(destip)\n    f = [ord(i) for i in f]\n    f = [len(f)] +\
      \ f\n    f += buff\n    \n    self.sock.sendto(bytes(f), (ip, port))\n    \n\
      def checkPacketTime(self):\n    if (self.testctr == 0): return\n    if (time.time()\
      \ - self.lastPacketTime) > 3:\n        print(f\"last packet {(time.time() -\
      \ self.lastPacketTime):.1f}s ago: got {self.testctr}/200 packets -> {(self.testctr/2):.2f}%\\\
      n\")\n        self.testctr = 0\n    \n    \n\ndef parse(self, i, pn):\n    \n\
      \    #converts binary data to radio packets, removing noise from either side\n\
      \    \n    i = \"\".join([str(j) for j in i])\n    try:\n        j = i.index(\"\
      0010110111010100\")\n    except:\n        print(\"packet not found\")\n    \
      \    return 0\n    i = i[j+16:]\n    try:\n        length = int(i[:8], 2)\n\
      \    except Exception as e:\n        print(f\"#1 - {i[:8]}\")\n    #print(f\"\
      packet #{pn+1}\")\n    #print(f\"found packet #{pn+1} with length {length}\"\
      , end =\"\\n\")\n    \n    i=i[24:]\n    #print(\"0x\", end=\" \")\n    out\
      \ = []\n    for j in range(length):\n        try:\n            s = int(i[:8],2)\n\
      \            out.append(s)\n        except Exception as e:\n            print(\"\
      discarded packet\")\n            return 0\n        i=i[8:]\n    #print(out)\n\
      \    split(self, out)\n    return 1\n   \n\n    \n   \nclass blk(gr.sync_block):\n\
      \    def __init__(self):\n        np.set_printoptions(threshold=np.inf)\n  \
      \      gr.sync_block.__init__(\n            self,\n            name='yeet',\n\
      \            in_sig=[np.byte, np.float32],\n            out_sig=[np.byte]\n\
      \        )\n        self.cleanBuffer = \"\"\n        self.fullBuffer = \"\"\n\
      \        self.cumPackets = 0\n        self.lastProcessTime = time.time()\n \
      \       self.preval = 0\n        self.cumctr = 0\n        self.sock = socket.socket(socket.AF_INET,\
      \ socket.SOCK_DGRAM)\n        self.testctr = 1\n        self.lastPacketTime\
      \ = 0\n        self.good_packets, self.bad_packets = 0, 0\n        self.prevTime\
      \ = 0\n        self.rssiDeque = deque(maxlen = 100000)\n        self.rssi =\
      \ 0\n        self.prevRssiTime = time.time()\n\n    def work(self, input_items,\
      \ output_items):\n#        print(f\"hi with {len(input_items[0])} samples\"\
      )\n\n        checkErrorRate(self)\n\n        if (testing_check): checkPacketTime(self)\n\
      \        # t1 = (input_items[1][:] == 1)\n        # t2 = (input_items[0])[t1]\n\
      \n        t2 = input_items[0]\n        \n        for i in input_items[1]: #the\
      \ avg received power (not necessarily signal strength)\n            self.rssiDeque.append(i)\n\
      \            \n        fg = sorted(self.rssiDeque)\n        self.rssi = sum(fg[-300:])\
      \ / sum(fg[:300])\n#        print(self.rssi)\n        if (time.time() - self.prevRssiTime\
      \ > 0.25):\n        \n#            sendRssiPacket(self, self.rssi)\n       \
      \     self.prevRssiTime = time.time()\n        \n        \n        \n      \
      \  g = str(t2)\n        bad = ['[', ']', '\\n', ' ', ',']\n        for i in\
      \ bad:\n            g = g.replace(i, \"\")\n\n        #g is good str.\n    \
      \    self.fullBuffer += g\n        \n        if len(self.fullBuffer) > 1000:\n\
      \            try:\n                (shortened, self.cumctr, self.preval) = clean(self.fullBuffer,\
      \ self.cumctr, self.preval)\n            except Exception as e:\n          \
      \      print(\"clean error\")\n                return len(output_items[0])\n\
      \            self.fullBuffer = \"\"\n            self.cleanBuffer += shortened\n\
      \        \n        \n        if ((time.time() - self.lastProcessTime > 0.001)\
      \ and len(self.cleanBuffer) > 300):\n            #print(self.cleanBuffer)\n\
      \            self.lastProcessTime = time.time()\n            #print(f\"processing\
      \ {len(self.cleanBuffer)} bits\")\n            s = self.cleanBuffer\n      \
      \      seq = \"1010101010100010110111010100\"\n            res = [i for i in\
      \ range(len(s)) if s.startswith(seq, i)]\n            if (res):\n          \
      \      for i in range(len(res)-1):\n                    packet = self.cleanBuffer[res[i]:res[i+1]]\n\
      \                    numparsed = parse(self, packet, self.cumPackets)\n    \
      \                #print(f\"got {numparsed} packets, buffer has size {len(self.cleanBuffer)}\"\
      )\n                    if (numparsed == 0):\n                        print(f\"\
      parse error - discarded buffer with size {len(self.cleanBuffer)}\")\n      \
      \                  self.cleanBuffer = \"0\"\n                        return\
      \ len(output_items[0])\n                    else:\n                        self.cumPackets\
      \ += numparsed\n                self.cleanBuffer = self.cleanBuffer[res[-1]:]\n\
      \                #print(self.cleanBuffer)\n        #print(len(output_items[0]))\n\
      \n        \n        #output_items[0][:] = (input_items[0])[temp]\n        \n\
      \        #output_items[0][:] = input_items[0] * self.example_param\n       \
      \ #return len(output_items[0])\n\n        return len(output_items[0])\n\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('yeet', 'blk', [], [('0', 'byte', 1), ('1', 'float', 1)], [('0', 'byte',
      1)], '', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1136, 196.0]
    rotation: 0
    state: true
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self, example_param=1.0):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Embedded Python Block',   # will show up in GRC\n\
      \            in_sig=[np.complex64],\n            out_sig=[np.complex64]\n  \
      \      )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.example_param\
      \ = example_param\n\n    def work(self, input_items, output_items):\n      \
      \  \"\"\"example: multiply with constant\"\"\"\n        output_items[0][:] =\
      \ input_items[0] * self.example_param\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    example_param: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Embedded Python Block', 'blk', [('example_param', '1.0')], [('0',
      'complex', 1)], [('0', 'complex', 1)], 'Embedded Python Block example - a simple
      multiply const', ['example_param'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [976, 572.0]
    rotation: 0
    state: disabled
- name: freq_xlating_fir_filter_xxx_0
  id: freq_xlating_fir_filter_xxx
  parameters:
    affinity: ''
    alias: ''
    center_freq: '0'
    comment: ''
    decim: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    taps: firdes.low_pass(1.0,samp_rate, 37500, 5000)
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [424, 316.0]
    rotation: 0
    state: true
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: '240000'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.00000010'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '100'
    ymin: '-10'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1064, 460.0]
    rotation: 0
    state: disabled
- name: qtgui_time_sink_x_2
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: '1024'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.00010'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '10'
    ymin: '-10'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [408, 452.0]
    rotation: 0
    state: disabled
- name: soapy_rtlsdr_source_0
  id: soapy_rtlsdr_source
  parameters:
    affinity: ''
    agc: 'False'
    alias: ''
    center_freq: '450003000'
    comment: ''
    dev_args: ''
    freq_correction: '0'
    gain: '30'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [48, 448.0]
    rotation: 0
    state: true

connections:
- [analog_quadrature_demod_cf_0, '0', digital_binary_slicer_fb_0, '0']
- [blocks_complex_to_mag_squared_0, '0', blocks_multiply_const_xx_0, '0']
- [blocks_moving_average_xx_0, '0', epy_block_0, '1']
- [blocks_multiply_const_xx_0, '0', blocks_moving_average_xx_0, '0']
- [digital_binary_slicer_fb_0, '0', epy_block_0, '0']
- [epy_block_0, '0', blocks_null_sink_0, '0']
- [freq_xlating_fir_filter_xxx_0, '0', analog_quadrature_demod_cf_0, '0']
- [freq_xlating_fir_filter_xxx_0, '0', blocks_complex_to_mag_squared_0, '0']
- [soapy_rtlsdr_source_0, '0', freq_xlating_fir_filter_xxx_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.3.0
